<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                  http://www.springframework.org/schema/beans/spring-beans.xsd
                  http://www.springframework.org/schema/mvc
                  http://www.springframework.org/schema/mvc/spring-mvc.xsd
                  http://code.alibabatech.com/schema/dubbo
                  http://code.alibabatech.com/schema/dubbo/dubbo.xsd
                  http://www.springframework.org/schema/context
                  http://www.springframework.org/schema/context/spring-context.xsd
                     http://www.springframework.org/schema/security
                     http://www.springframework.org/schema/security/spring-security.xsd">


    <!--
    http：用于定义相关权限控制
    auto‐config：是否自动配置
    设置为true时框架会提供默认的一些配置，例如提供默认的登
    录页面、登出处理等
    设置为false时需要显示提供登录表单配置，否则会报错
    use‐expressions：用于指定intercept‐url中的access属性是否使用表达式
    -->
    <!-->
http：用于定义相关权限控制
指定哪些资源不需要进行权限校验，可以使用通配符
-->
<!--    <security:http security="none" pattern="/pages/a.html" />-->
<!--    <security:http security="none" pattern="/pages/c.html" />-->
<!--    <security:http security="none" pattern="/pages/**"/>-->
    <security:http security="none" pattern="/login.html" />
    <security:http auto-config="true" use-expressions="true">
        <!--
    intercept‐url：定义一个拦截规则
    pattern：对哪些url进行权限控制
    access：在请求对应的URL时需要什么权限，默认配置时它应该是一个以逗号
    分隔的角色列表，
    请求的用户只需拥有其中的一个角色就能成功访问对应的URL
    -->
        <security:form-login
                login-page="/login.html"
                username-parameter="username"
                password-parameter="password"
                login-processing-url="/login.do"
                default-target-url="/index.html"
                authentication-failure-url="/login.html"/>
        <!--登录以后可以访问-->
        <security:intercept-url pattern="/pages/a.html" access="isAuthenticated()" />
        <!--拥有add权限就可以访问b.html页面-->
<!--        <security:intercept-url pattern="/pages/b.html" access="hasAuthority('add')"/>-->
<!--        &lt;!&ndash;拥有ROLE_ADMIN角色就可以访问c.html页面&ndash;&gt;-->
<!--        <security:intercept-url pattern="/pages/c.html" access="hasRole('ROLE_ADMIN')"/>-->
        <!--拥有ROLE_ADMIN角色就可以访问d.html页面-->
        <!--注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/pages/d.html" access="hasRole('ADMIN')" />
        <!--

        logout：退出登录
        logout‐url：退出登录操作对应的请求路径
        logout‐success‐url：退出登录后的跳转页面
        -->
        <security:logout logout-url="/logout.do"
                         logout-success-url="/login.html" invalidate-session="true"/>
        <security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"/>
<!--        <!‐‐-->
<!--        csrf：对应CsrfFilter过滤器-->
<!--        disabled：是否启用CsrfFilter过滤器，如果使用自定义登录页面需要关闭此项，否则-->
<!--        登录操作会被禁用（403）-->
<!--        ‐‐>-->
        <security:csrf disabled="true"/>
    </security:http>
    <!--
    authentication‐manager：认证管理器，用于处理认证操作
    -->
    <security:authentication-manager>
        <!--
        authentication‐provider：认证提供者，执行具体的认证逻辑
        -->
        <security:authentication-provider user-service-ref="userService">

        <!--
            user‐service：用于获取用户信息，提供给authentication‐
            provider进行认证
            -->
<!--            <security:user-service>-->
<!--                <security:user name="admin" password="{noop}admin" authorities="ROLE_ADMIN"/>-->
<!--            </security:user-service>-->
        </security:authentication-provider>
    </security:authentication-manager>
    <bean id="userService" class="cn.yihao.service.UserService"/>

    <!--配置密码加密对象-->
    <bean id="passwordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    <security:authentication-manager>
        <!--
        authentication‐provider：认证提供者，执行具体的认证逻辑
        -->
        <security:authentication-provider user-service-ref="userService">
            <!--指定密码加密策略-->
            <security:password-encoder ref="passwordEncoder" />
            <!--
            user‐service：用于获取用户信息，提供给authentication‐
            provider进行认证
            -->
        </security:authentication-provider>
    </security:authentication-manager>
    <!--开启spring注解使用-->
    <context:annotation-config/>
    <mvc:annotation-driven/>
    <context:component-scan base-package="cn.yihao.controller" >
    </context:component-scan>
    <!--开启注解方式权限控制-->
    <security:global-method-security pre-post-annotations="enabled"/>

</beans>
